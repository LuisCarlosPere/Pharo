+Proxy:El proxy es como una copia del objeto de la base de datos. ( Es como una fachada. En caso de solicitarle datos va
y los consulta a la base de datos y lo regresa.). Si se desea traer ese ojeto tambien hay que usar el mensaje alsoFetch.
Para comparar si es el objeto que queremos se usa value class.

+ double-dispatch: Para ver como funciona:
    -TPVacationEmployeeLedgerAccount -> createAccountForEmployee aTPEmployee typeAccount: typeAccount 
    using: aTPApplyForVacationEmployeeComponent.
    -TPApplyForVacationEmployeeComponent -> createAccountForType: anAccountType.
    -TPApplyForVacationEmployeeComponent -> setCreatorInAccount: aVacationEmployeeLedgerAccount

+Para entrar a los estilos de lo componentes: TinyPayroll-Components -> Application -> TPFileLibrary

+Para ver modelos de inputs     -> bootstrap4-Core -> subpaquete Canvas.

+Para debuggear en Pharo.
    (WAAdmin defaultDispatcher handlerAt: 'app')
exceptionHandler: WADebugErrorHandler.

+TPDBSetup install  -> Reinstala la base de datos. Se usa cuando se crean nuevas tablas.
+TPDatabase resetCurrent -> Cuando se borran registros desde Postgres.
+TPDataError -> En esta clase se encuentran los errores de mensajes.
    ^ TPDataError insufficientDays032 signal  -> Esta línea se usa para retornar los errores de mensajes. el signal es lo que lo hace funcionar.
+TPDemoData install -> Crea una base de datos de prueba
+TPDatabase releaseMode ifFalse:[codigo]

+http://localhost:8080/bootstrap4/browser -> bootstrap4 -> Se usa para ver la libreria que se esta usando.

+Para concatenar numeros.
    | numero1 numero2 resultado |
    numero1 := 123.
    numero2 := 456.
    resultado := numero1 asString , numero2 asString.
    Transcript show: resultado.

+ (100 to: 999) atRandom    -> Genera un numero aleatorio entre 100 y 999

+La comparacion de desigual se hace ponineod ~=

+La negacion se usa poniendo not antes de lo que se desea negar o mandandole not al objeto que recive.
    a := true.
    b := a not. "b es false"


+Con el siguiente ejemplo se saca la fecha en numeros enteros.
date2 := Date today.
	
	timeStamp2 := date2 asZTimestamp.
	
	day2 := timeStamp2 dayOfMonth.
	
	month2 := timeStamp2 month.
	
	year2 := timeStamp2 year.

+Para hacer un ifTrue con dos condiciones usando and.
    month1 = month2 & (day1 >= day2)
						ifTrue:[].

+Para hacer un ifTrue con dos condiciones usando or.
    month1 = month2 or: [day1 >= day2].

+Con la siguiente sentencia se realiza la busqueda del ultimo registro en una tabla.
    **PARA TRAER EL OBJETO
    objectAccount := (((SimpleQuery read: TPVacationLedgerAccount)
		                  limit: 1;
		                  orderBy: [ :entry | entry ledgerAccountID descending ]) 
		                 executeIn: TPDatabase current dbSession) first.

    **Para traer solo un registro
    "objectAccount := ((SimpleQuery read: TPVacationLedgerAccount)
		                  limit: 1;
		                  orderBy: [ :entry | entry vacationLedgerAccountID descending ]) 
		                 executeIn: TPDatabase current dbSession."

+Para hacer busquedas con dos parametros.
	empl := TPVacationEmployeeLedgerAccount readOneWhere: [ :entry | 
		        entry employee = dataObject employee AND: [ 
			        entry type = 'liability' ] ].

+Para hacer busquedas de muchos registros.
    journalEntry := self readWhere: [ :entry | 
		                entry vacationLedgerAccountID
		                = aTPVacationLedgerAccountID ]

+windows + shift + s -> Para recortar imagen de pantalla

+shift + Enter -> Spotter:   Ayuda a buscar clases, metodos o recursos.

+ctrl + shift + f   -> Formatear el codigo.

+CTRL + i   -> Inspect it

+ Browse -> Finder  -> Sirve para encontrar cualquier metodo en pharo.
Dar clic en la pestaña de Browse despues de buscar un metodo para ver la clase

+ ctrl + i -> Abre el inspector.

+ tools -> System Browser -> Para ver los paquetes, las clases y los metodos.

+self halt -> Se usa para debuggear hasta cierto punto.

+self haltIf: (...) -> Se usa para debuggear en caso de que se cumpla lo que hay entre parentesis.

+'Hello World' asMorph openInWindow -> Abre una ventana con el mensaje Hello World
-asMorph -> Se usa para convertir a un objeto grafico.
-openInWindow -> Se usa para abrir una ventana.

+vid 17 -> W1.Redo7.EN : Looking a commit history and changes with Iceberg.
+vid 28 -> W2.LiveA.EN : Finding methods with the Finder.
+vid 36 -> W3.S4.EN : A simple HTTP Application

+No confundir () parentesis con [] corchetes. Los parentesis se usan para cambiar el orden de ejecucion. Los corchetes se usan para encapsular código.

*****Matematicas****
+abs    -> Retorna el valor absoluto.
+odd    -> Retorna los numeros impares
+atRandom   -> Retorna un valor al azar.

****Cascada *****
+Se usa para mandar multiples mensajes a un mismo objeto.
    Transcript cr.
    Transcript show: 1.
    Transcript show: 2.

    Transcript 
        cr;
        show: 1;
        show: 2

****Orden de ejecucion*****
+() -> Unary -> Binary -> Keywords
+En caso de ser del mismo nivel se ejecutan de izquierda a derecha

*******Array*********
El indice de Arreglos en pharo inician en 1 y no en 0 como en otros lenguajes
#(...)  Crea un arreglo
#(...) at: put:     Cambia un elemento del Array.


*******Collecciones*******
+OrderedCollection -> Son dinamicos. Crecen conforme se le agregan datos.
+Array -> Son de tamaño definido. Se puede acceder a los elementos mediante un indice.
+Set -> No acepta duplicados.
+Dictionary -> Tiene una llave y un valor.
+Ejemplos:
    Array new: 4
    >#(nil nil nil nil)

    Array new: 2
    >#(nil nil)

+Metodos de los collections:
    withAll:    -> Inicializa una colleccion con ciertos valores.
        OrderedCollection new: 5 withAll: 'a'.
        > an OrderedCollection('a' 'a' 'a' 'a' 'a')
    
    do: ->Recorre una colección.
        #('Calvin' 'hates' 'Suize')
        do: [:each | Transcript show: each; cr]

    at: -> Accede al indice que se indica.
    at: put: -> Cambia el valor del indice indicado por el valor introducido en put.
    ad:     -> Agregar un elemento a la coleccion.
    addFirst:       -> Agrega al inicio el elemento.
    asOrderedColection      -> Convertir a OrderedCollection
    asSet       -> Convertir a Set.
    asArray     -> Convertir a Array

    {#January -> 31.
     #February -> 28.
     #March -> 31} asDictionary     -> Es igual a hacer un diccionario
    
    at: #Key    ->Para acceder a un valor de un dictionary se entra directo con el valor del Key.
    at: #Key ifAbsent: [argument]   ->En caso de no encontrar la Key la agrega.
    keysAndValuesDo: [:k :v | ....]     -> Para recorrer el diccionario con sus keys y values.
    collect: []     -> Aplica el bloque para cada elemento y retorna una coleccion con los resultados.

******Loops*****
+4 timesRepeat: [self doSomething]
+0 to: 100 do: [:i | ...]
0 to: 100 by: 3 do:[:i | ...]
aCollection do: [:each | ...]
[...] whileTrue
[...] whileTrue: [...]


*******Iteradores ********
+do: (iterate)
+collect: (iterate and collect results)
+select: (select matching elements)
+reject: (reject matching elements)
+detect: (get first element matching)       -> Encuentra el primer elemento que hace match con lo especificado.
+detect: ifNone: (get first element matching or a default value)
+includes: (test inclusion)
+anySatisfy: (tests if one object is satisfying the criteria)
+allSatisfy: (test if all objects are satisfying the criteria)
+reverseDo: (Do an action on the collection starting from the end)
+doWithIndex: (do an action with the element and its index)
+pairsDo: (evaluate aBlock with my elements taken two at a time.)
+with:do: (requires two structures of the same length).
    #(1 2 3)
        with: #(10 20 30)
        do: [:x :y | Transcript show: (y * x); cr].
        > 10 40  90
    
+do:separatedBy:
    String streamContents: [:s |
        #('a' 'b' 'c')
            do: [:each | s<<<each]
            separatedBy: [s<<',]
    ]
    >'a,b,c'

+groupedBy: (To group elements according to a grouping function)
    #(1 2 3 4 5 6 7) groupedBy: #even
    >a PluggableDictionary(false->#(1 3 5 7) true->#(2 4 6))

+flatCollect: (Join nesting collections)
    #(#(1 2) #(3) #(4) #(5 6)) collect:[:each | each]
    > #(#(1 2) #(3) #(4) #(5 6))

    #(#(1 2) #(3) #(4) #(5 6)) flatCollect: [:each | each]
    >#(1 2 3 4 5 6)

+Para buscar mas hay que ir a la clase SequenceableCollection

+arreglo removeFirst    -> Elimina el primer elemento.


*******Streams********
+stream:= #($a $b $c $d $e $f) readStream     -> Crea un stream.
+stream next    -> Recorre el stream de uno en uno.
+stream upTo:   -> Retorno el stream desde la posicion actual hasta el elemento indicado.
+stream position    -> Retorna la posicion actual del stream.
+stream upToEnd     -> Retorna el stream desde la posicion actual hasta el final
    | stream |
    stream := #($a $b $c $d $e $f) readStream.
    "stream next."
    stream upTo: $d.
    stream position.
    stream upToEnd 

+stream:= (Array new: 6) writeStream    -> Crea un nuevo stream con un array de 6 posiciones.
+stream nextPut: ->     Agrega un argumento al stream.
+stream contents    -> Muestra el contenido del stream.
+stream nextPutAll:     -> Agrega todos los argumentos al stream
    | stream |
    stream := (Array new: 6) writeStream.
    stream nextPut:1.
    stream contents.
    stream nextPutAll: #(4 8 2 6 7).
    stream contents.

+Para crear un stream con un archivo que aun no existe.
    | stream |
    stream := 'hello.txt' asFileReference writeStream.
    stream nextPutAll: 'Hello´Pharo!'.
    stream close.

+Para leer el stream del archivo creado.
    stream := 'hello.txt' asFileReference readStream.
    stream next.
    stream upToEnd

+Para crear un stream con OrderedCollection
    | stream |
    stream := OrderedCollection new writeStream.
    stream nextPut: 1.
    stream contents.
    IS EQUIVALENT TO
    OrderedCollection  streamContents:  [ :stream | stream nextPut: 1 ]

*****Bloques******
+ []  -> Se usa para definir un bloque.
+ Por naturaleza el bloque congela el código dentro de el.
+ Un bloque debe tener 2 o 3 argumentos como máximo.
+ Se usa para encapsular código.
+ Se usa cuando el código dentro se va a ejecutar multiples veces.
+ [] value  -> Con esto se ejecuta el código dentro del bloque.
+ [:x | x + 2] value: 5 -> Esto es un bloque con argumento.
+ | add2 |
  add2:= [:x | x + 2].
  add2 value: 5 ->7
  add2 value: 33 -> 35

+[:x:y| x + y] value:5 value:2 -> Es un bloque con dos argumentos.
+[:index | |args| ...] -> Bloque con variables temporales.
+ ^ -> Se usa para retornar.


******Booleans and Conditionals********
+ false & (1 error:'crazy') -> Retorna error
+ false and: [1 error: 'crazy'] -> No retorna error.
+ Weather isRainning
    ifTrue:[]
    ifFakse:[]

+ ifEmpty: ['As classified']
+ ifNotEmpty: [:aList | aList at: index] -> Cacha el argumento que se encontro.
+ isNill


*******Variables******
+Variables locales empiezan con minuscula convencion
+Variables compartidas empiezan con mayusculas por convencion
+self -> Se refiere al receptor del mensaje.
+super -> Se refiere al receptor pero el metodo busca en la clase padre de la clase que esta definiendo el metodo
+thisContext -> Se refiere al objeto que reifica la pila de llamadas del programa


*******Herencia ********
+Una clase tiene solo una superclase.
+Una clase eventualmente hereda de Object.
+self -> Hace referencia al objeto de la instancia.
    Ejemplo:
        Class A
            methods: foo -> ^ 10
                     bar -> ^ self foo
        
        Class B
            methods: foo -> ^ 50
    
    A new foo
    > 10
    B new foo
    > 50
    A new bar 
    > 10
    B new bar
    > 50

+super      -> Busca el metodo en la superclase
    Ejemplo:
    Class A 
        methods: foo -> ^ 10
                 bar -> ^ self foo

    Class B 
        methods: bar -> ^ super bar + self foo

    Class C 
        methods: foo -> ^ 50
    
    A new bar
    > 10
    B new bar 
    > 20
    C new bar
    > 100

+videos 49 y 50


****** Clases****
+Parsing Lines:
    ! -> Se usa para titulo
    - -> Se usa para un list item
    -- -> Se usa para un subitem


*********Ejemplos *********
+Ejemplo de dictionary 
    | miDiccionario |
    miDiccionario := Dictionary new.
    miDiccionario at: 'clave1' put: 'valor1'.
    miDiccionario at: 'clave2' put: 'valor2'.

    metodos:
    existe := miDiccionario includesKey: 'clave1'.
    valor := miDiccionario at: 'clave1'.
    miDiccionario removeKey: 'clave1'.
    miDiccionario keysAndValuesDo: [ :clave :valor |    "procesar clave y valor"].


******Seaside *******
+Mas documentacion video 55-Seaside: An Innovate Web Application Framework W4-S8-VoiceOverEn-
+Crear componentes html:
    html div id: 'list';
        with: [html span class: 'item'; with: 'item1'.
               htnl span class: 'item'; with: 'item2']
    Es equivalente a:
    <div id = "list">
        <span class = "item">item 1 </span>
        <span class = "item">item 2 </span>
    </div>


******CREAR UN NUEVO PROYECTO CON GIT ********
+Vid 59 Git: New project creation W4.
1.- Se crea un nuevo repositorio en git.
2.- En pharo ir a iceberg -> Add new repository -> Clone from github.com -> Seleccionar HTTPS como protocolo.
3.- Doble clic en el repositorio nuevo -> Dar clic en repair -> Create project meta-data.
4.- En la pestaña de code directory hay que agregar uno con nombre src.
5.- Hacer commit.
6.- Agregar los paquetes en Add package.
7.- Hacer commit.
8.- Hacer push.


****AGREGAR UN REPOSITORIO REMOTO A UN PROYECTO EXISTENTE******
1.-iceberg -> doble clic sobre el repositorio local -> clic sobre repositorio(parte superior derecha) -> Add remote


******CARGAR UN REPOSITORIO CON METACELLO de un repositorio de github*****

Metacello new 
    baseline: 'Nombre de paquete'
    repository: 'url del repositorio de github'
    load: 'default'.

******EN CASO DE NO PODER HACER UN PUSH AL REPOSITORIO REMOTO ********
1.- Se crea el repositorio en github.
2.- Copiar el link del repositorio para hacer git clone en la carpeta de Iceberg.
    -Para entrar a la carpeta de Iceberg: Este equipo/documentos/pharo/images/elNombreDelProyecto/pharo-local/Iceberg
3.- Ir a pharo -> Abrir iceberg -> Añadir repositorio -> Import from existing clone(Segunda opcion despues de New repository) 
    -> Seleccionar la carpeta creada con git clone.
4.- En pharo hacer los commits que se desean agregar.
5.- En git bash hacer push desde la carpeta donde se hizo el git clone.

*******INSTRUCCIONES PARA CARGAR IMAGEN TINYPAYROLL******
1.- Ir a github al repositorio panalcloud. Ir a TinyPayroll-docs.
2.- Instalar Postgres.
3.- Configurar las variables de entorno.
    -Cambiar la variable Password -> Depende de la contraseña de Postgres
    -Cambiar la variable DB_User -> Poner Postgres.
4.- Reiniciar el CPU.
5.- Ir a github -> Settings -> Developer settings -> Personal acces tokens-> tokens (classics) -> Generate new -> Generar nuevo token clasico
    ->Asignas cualquier nombre -> Que no expire -> Seleccionas la opcion repo -> Generar token -> Copiar token.
6.- Crear imagen en pharo -> poner nombre ph10Tinypayroll -> clic en barra de herramientas <pharo> -> Settings -> En el buscador poner credential.
    ->Current list of credential Presionar edit -> Añadir token datos de github.
7.- Abrir playground -> Copiar: 
Metacello new
      baseline:'TinyPayroll';
      repository: 'github://panalcloud/TinyPayroll:main/';
      load: 'default'
    -> Do it.
8.- Copiar en playground: TPDBSetup install -> Do it.
9.- Copiar en playground: TPDemoData install -> Do it.
10.- En el package TinyPayroll-Components -> En Application -> En la clase TPApplicationRootComponent -> class side -> register -> Poner en serverPath put '/app'
11.- playground -> correr linea: TPApplicationRootComponent register.
12.- Ir a http://localhost:8080/app


*******Challenges ***********
+ Challenge 0 week 1
Using the Zinc HTTP library available by default in Pharo, get the pharo logo
from http://pharo.org/files/pharo.png. Convert it into a morph and open it in
Pharo. You should obtain something similar than the picture below.

Hints:
• The class ZnEasy offers several handy messages to ease HTTP requests.
• The message asMorph converts low level graphical elements (form)
into Morph (graphical objects).
• The message openInWorld open graphical objects.

Solution
(ZnEasy getPng: 'http://pharo.org/files/pharo.png') asMorph
openInWorld



+ Challenge 1 week 2.
Using the Zinc HTTP library, get a photo from an email address through gravatar http://www.gravatar.com/avatar/. Convert it into a morph and open it
in Pharo. Using stephane.ducasse@inria.fr so that you are sure to get a .jpg.
The result should look like situation shown in the figure below.

Hints:
• The path to the photo associated to an email is composed as follows:
http://www.gravatar.com/avatar/(MD5 email-based hex).jpg
• To build an MD5 cypher from the email use MD5 hashMessage: .Pay
attention that you should convert its result in hexadecimal.
• Do not forget to trim blanks around the email and use it in lower case.
• asMorph convert pictures into Morphs.
• Message openInHand is fun.

Solution
| email url |
email := 'stephane.ducasse@inria.fr'.
url := 'http://www.gravatar.com/avatar/', (MD5 hashMessage: email
trimBoth asLowercase) hex, '.jpg'.
imageMorph := (ZnEasy getJpeg: url) asMorph openInHand.

Para cerrar lla imagen abierta, ejecuta :
World removeMorph: imageMorph

*********BASURA*********
+TPEmployeeListComponent -> renderEmployeeListOn -> En el boton a deshabilitar.
"disabled: (self isDisabled: buttonDisabled and: emp);"

+TPEmployeeListComponent aqui se crea el mensaje.
isDisabled: button and: emp

	^ emp employeeRoleInformation dateOfHireIsSet not and: [ button ]
	
"beDisabledIf: [ 
								buttonDisabled and: [ 
										emp employeeRoleInformation dateOfHireIsSet not ] ];"


+TPEmployeesVacationListComponent -> editEmployee -> Aqui va el siguiente codigo
"editEmployee: aTPEmployee

	[ 
	self call: (TPApplyForVacationEmployeeComponent withEmployee:
			 (TPEmployeeVacationInformation for: aTPEmployee)) ]
		on: Error
		do: [ :ex | self errorMessage: ex messageText ]".


+Quitar jQuery para que en un solo clic se llene sin necesidad de dar clic fuera del textnote.
+Al presionar el boton hay que regresar a la pantalla anterior.
Agregar variable vacationJournalEntries que apunte hacia los journalEntries de esa transaccion.
+Quitar chargedDate al movimiento de agregar o quitar y usar fecha de creacion para el reporte.
Crear test para verificar las transacciones.
Antes de hacer posting hay que verificar que los journalEntries esten balanceadas.

Issues
+Al presionar clic en el boton cierre de vacaciones sin haber creado una cuenta en el catalogo manda error.
+Si se intenta crear una nomina sin haber creado nada manda error de companyName nul pero el error no se muestra en la aplicacion.
El mismo error de arriba lo manda si se intenta entrar a la ventana de nomina sin haber creado nada.
+En agregar compania en varios estados no salen sus municipio, ciudad, colonia y cp.
+Agrega nomina sin empresa.
+Error: Message not understood: TPCCompany >> #registerBaseAcounts -> Este mensaje sale cuando se crea una compania.
+Message not understood: TPCompanyLedgerAccount >> #companyID: -> Cuando se desea agregar una cuenta a una empresa.
+No se puede agregar una cuenta en la compania